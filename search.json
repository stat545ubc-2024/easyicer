[{"path":"https://stat545ubc-2024.github.io/easyicer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Brendan Chia Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://stat545ubc-2024.github.io/easyicer/articles/easyicer-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Transforming raw data into ICER plots using the easyicer package","text":"vignette tutorial seamlessly create incremental cost-effectiveness ratio (ICER) analyses, including plots, making use functions package. package designed pipeline structure end-user cohesively deploy package functions step-wise manner arrive final cost-effectiveness analysis (CEA) ICER plots. instructive purposes, vignette organized 3 use-cases can integrated single workflow deployed standalone. target domain package health technology assessment economics, CEAs common tool evaluating risk-benefit new health interventions implementation.","code":""},{"path":"https://stat545ubc-2024.github.io/easyicer/articles/easyicer-vignette.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Transforming raw data into ICER plots using the easyicer package","text":"data used tutorial modified dataset obtained authors’ research project. full dataset publicly available. modified dataset used herein can located GitHub repository package. purpose tutorial, assign dataset object. dataset contains 8 variables 828 rows observations. data obtained microsimulation model projecting lifetime health economic outcomes average-risk colorectal cancer screening simulations pre-defined Canadian birth cohorts. 4 predictor variables, characteristics (cohort, scr_age, ppt_rate, scr_mod, year), 3 outcome variables (including cost outcomes health outcome). See full variable definitions.","code":"# Load the \"here\" package to access the .csv file in the data folder if you are in the source package repository. easyicer_data <- read.csv(here::here(\"data/easyicer_example_data.csv\"))  dim(easyicer_data) #> [1] 828   8  head(easyicer_data, n = 10) #>    cohort scr_age ppt_rate scr_mod year Cost_of_screen_x_reen_positives #> 1    1973      50     0.18     FIT 2015                        27458883 #> 2    1973      50     0.18     FIT 2016                        27805623 #> 3    1973      50     0.18     FIT 2017                        27650384 #> 4    1973      50     0.18     FIT 2018                        16568149 #> 5    1973      50     0.18     FIT 2019                        16598985 #> 6    1973      50     0.18     FIT 2020                        17469883 #> 7    1973      50     0.18     FIT 2021                        17340106 #> 8    1973      50     0.18     FIT 2022                        17281809 #> 9    1973      50     0.18     FIT 2023                        22268950 #> 10   1973      50     0.18     FIT 2024                        29240148 #>    Cost_of_clinic_x_ow_up_protocol Health_adjusted_person_years #> 1                          1660290                      2132296 #> 2                          3498682                      2141253 #> 3                          3764434                      2149907 #> 4                          6989066                      2151707 #> 5                          7421521                      2149004 #> 6                          7601313                      2147614 #> 7                          8097227                      2145495 #> 8                          8479750                      2142464 #> 9                          7999188                      2138152 #> 10                         8926254                      2132390"},{"path":"https://stat545ubc-2024.github.io/easyicer/articles/easyicer-vignette.html","id":"variable-dictionary","dir":"Articles","previous_headings":"","what":"Variable Dictionary","title":"Transforming raw data into ICER plots using the easyicer package","text":"cohort: simulated birth cohort Canadian population modeled adenoma risk relative age group. Example: 1973 represents cohort individuals born 1973 1977. scr_age: modeled age screening initiation scenario. Example: 50 means simulated individuals began screening age 50. ppt_rate: modeled participation rate colorectal cancer screening screening scenario. Example: 0.18 = 18% cohort underwent screening. scr_mod: modality screening test. Either fecal immunochemical test (FIT) colonoscopy (f10q). year: corresponding year outcomes simulated . Cost_of_screen_x_reen_positives: total cost screening, including follow-screening positive cases. Cost_of_clinic_x_ow_up_protocol: cumulative cost incurred year clinical diagnoses follow-procedures. Health_adjusted_person_years: estimated cumulative life years individuals based individually ascribed health utility scores. Herein defined quality-adjusted life years (QALY).","code":""},{"path":"https://stat545ubc-2024.github.io/easyicer/articles/easyicer-vignette.html","id":"use-case-1-calculating-cumulative-outputs-for-cost-and-qaly-outcomes-with-summed_output","dir":"Articles","previous_headings":"","what":"Use-Case 1: Calculating cumulative outputs for cost and QALY outcomes with summed_output()","title":"Transforming raw data into ICER plots using the easyicer package","text":"Often times health economic data, might get large volume raw unprocessed outputs. particularly case simulation models generate display highly granular information. Often times, individual outputs meaningless unless transformed way (e.g., calculating cumulative value) helpful deploy summed_output() function, especially process iterative. summed_output() function calculates sum numeric column dataset arrive cumulative value. dataset, valuable need calculate sum output variable (costs QALY) since originally calculated per year. function also allows end-user group filter specific characteristics. example, data, multiple birth cohorts, screening ages screening modalities want group calculating cumulative values. Lastly, function can handle NA values might otherwise disrupt function calculation. Now arrived necessary outputs calculate ICERs. notice function general sum function ability sum groups filtered datasets? function strictly intended calculating ICERs versatile purposes, makes iterative sum calculations convenient - especially calculating ICERs. Note specifically call na.rm = TRUE, set TRUE default called function automatically remove NA values.","code":"# Set a filter parameter to call in filter_vars ppt18 <- easyicer_data$ppt_rate == 0.18  # Calculate the cumulative values for the cost outcome cumulative_cost <- summed_output(   data = easyicer_data,   group_vars = c(\"scr_mod\", \"scr_age\"),   sum_var = \"Cost_of_screen_x_reen_positives\",   filter_vars = ppt18 )  # Calculate the cumulative values for the health outcome cumulative_qaly <- summed_output(   data = easyicer_data,   group_vars = c(\"scr_mod\", \"scr_age\"),   sum_var = \"Health_adjusted_person_years\",   filter_vars = ppt18 )  print(cumulative_cost) #> # A tibble: 4 × 3 #> # Groups:   scr_mod [2] #>   scr_mod scr_age  cumulative #>   <chr>     <int>       <dbl> #> 1 FIT          45 2694728140. #> 2 FIT          50 2517849263. #> 3 f10q         45 3420224126. #> 4 f10q         50 3312806274. print(cumulative_qaly) #> # A tibble: 4 × 3 #> # Groups:   scr_mod [2] #>   scr_mod scr_age cumulative #>   <chr>     <int>      <dbl> #> 1 FIT          45 205541825. #> 2 FIT          50 205524017. #> 3 f10q         45 205610208. #> 4 f10q         50 205601137."},{"path":"https://stat545ubc-2024.github.io/easyicer/articles/easyicer-vignette.html","id":"use-case-2-calculating-icers-from-cumulative-cost-and-qaly-inputs-with-icercalc","dir":"Articles","previous_headings":"","what":"Use-Case 2: Calculating ICERs from cumulative cost and QALY inputs with icercalc()","title":"Transforming raw data into ICER plots using the easyicer package","text":"can calculate ICERs, need transform data structure values recognized correct order icercalc() function. ICERs, reference values correspond reference comparator scenario/intervention. context dataset, refers scr_age = 50 scr_mod = FIT (FIT 50), current colorectal cancer screening strategy Canada. order properly calculate ICERs, function expects matrix structure illustrated: created matrix, might realize order values matrix correct. Instead manually re-coding matrix, can specify rev = \"neither\", \"rows\", \"columns\" \"\" reverse order columns, rows, columns rows. default rev = \"neither\" need specify rev argument matrix correct. instructive purposes, rev argument showcased . output icercalc() displays final matrix used ICER calculation, incremental cost output (difference cost new reference scenarios), incremental QALY (difference QALY new reference scenarios) ICER. component cost QALY outcomes displayed end user works entire easyicer pipeline, values required icerplot() function.","code":"ref     new  cost   n00     n01  qaly   n10     n11 # Create matrix of cost and QALY values for each scenario icer_matrix_fit45 <- matrix(c(   cumulative_cost$cumulative[2],   cumulative_cost$cumulative[1],   cumulative_qaly$cumulative[2],   cumulative_qaly$cumulative[1]),   nrow = 2,   ncol = 2,   byrow = TRUE)  # Calculate ICERs using matrix  icer_fit45 <- icercalc(data = icer_matrix_fit45) #> [1] \"Modified matrix:\" #>            [,1]       [,2] #> [1,] 2517849263 2694728140 #> [2,]  205524017  205541825 #>  #> Incremental Cost: #>  176878878  #> Incremental QALY: #>  17807.78  #> Incremental cost-effectiveness ratio (ICER): #>  9932.676  # Re-iteration for COL 45 scenario icer_matrix_col45 <- matrix(c(   cumulative_cost$cumulative[2],   cumulative_cost$cumulative[3],   cumulative_qaly$cumulative[2],   cumulative_qaly$cumulative[3]),   nrow = 2,   ncol = 2,   byrow = TRUE)  icer_col45 <- icercalc(data = icer_matrix_col45) #> [1] \"Modified matrix:\" #>            [,1]       [,2] #> [1,] 2517849263 3420224126 #> [2,]  205524017  205610208 #>  #> Incremental Cost: #>  902374863  #> Incremental QALY: #>  86190.82  #> Incremental cost-effectiveness ratio (ICER): #>  10469.5  # # Re-iteration for COL 50 scenario icer_matrix_col50 <- matrix(c(   cumulative_cost$cumulative[4], # The columns of the matrix are purposefully in inverse order to demonstrate rev argument.   cumulative_cost$cumulative[2],   cumulative_qaly$cumulative[4],   cumulative_qaly$cumulative[2]),   nrow = 2,   ncol = 2,   byrow = TRUE)  icer_col50 <- icercalc(data = icer_matrix_col50, rev = \"columns\") #> [1] \"Modified matrix:\" #>            [,1]       [,2] #> [1,] 2517849263 3312806274 #> [2,]  205524017  205601137 #>  #> Incremental Cost: #>  794957011  #> Incremental QALY: #>  77119.96  #> Incremental cost-effectiveness ratio (ICER): #>  10308.06"},{"path":"https://stat545ubc-2024.github.io/easyicer/articles/easyicer-vignette.html","id":"use-case-3-creating-icer-plots-from-calculated-icers-with-icerplot","dir":"Articles","previous_headings":"","what":"Use-Case 3: Creating ICER plots from calculated ICERs with icerplot()","title":"Transforming raw data into ICER plots using the easyicer package","text":"last stage basic CEA plot ICERs along coordinate system. helpful visually comparing cost-effective multiple interventions relative reference intervention. icerplot() function creates scatterplot based dataframe least two numeric columns (representing cost QALY outcomes). additional optional names argument implemented creates legend labels ICER values corresponding names.  Notice need ICER outputs icercalc() use function. fact, ICER values calculated icercalc() work since component costs QALY outcomes required dataframe, icercalc() provides incremental costs QALYs well ICER. highlights functions can used integrated manner independently based end user’s needs data structures.","code":"# Create a dataframe (if needed) with cost and QALY derivatives of ICER values. icer_coordinates <- data.frame( intervention = c(\"FIT 45\", \"COL 45\", \"COL 50\"), QALY = c(17807.78, 86190.82, 77119.96), Cost = c(176878878, 902374863, 794957011))  icerplot(data = icer_coordinates, x = \"QALY\", y = \"Cost\", names = \"intervention\")"},{"path":"https://stat545ubc-2024.github.io/easyicer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brendan Chia. Author, maintainer.","code":""},{"path":"https://stat545ubc-2024.github.io/easyicer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chia B (2024). easyicer: Set functions easy computation plotting ICERs. R package version 2.0.0, https://stat545ubc-2024.github.io/easyicer/.","code":"@Manual{,   title = {easyicer: Set of functions for easy computation and plotting of ICERs},   author = {Brendan Chia},   year = {2024},   note = {R package version 2.0.0},   url = {https://stat545ubc-2024.github.io/easyicer/}, }"},{"path":"https://stat545ubc-2024.github.io/easyicer/index.html","id":"easyicer","dir":"","previous_headings":"","what":"Set of functions for easy computation and plotting of ICERs","title":"Set of functions for easy computation and plotting of ICERs","text":"R package designed integrated pipeline multiple interconnected functions can take raw health economic data create cost-effectiveness analyses. contains summed_output() function takes column character string storing vector numeric values within dataframe calculates sum vector. icercalc() icerplot() functions can used calculate plot ICER values based inputs obtained summed_output(). designed help users automate repetitive sum operations based user-defined variable groupings filter conditions repeat ICER analyses. package contains multiple dependencies support syntax compatibility plotting ggplot2.","code":""},{"path":"https://stat545ubc-2024.github.io/easyicer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Set of functions for easy computation and plotting of ICERs","text":"can install latest version easyicer :","code":"install.packages(\"devtools\") devtools::install_github(\"stat545ubc-2024/easyicer\", ref = \"2.0.0\")"},{"path":"https://stat545ubc-2024.github.io/easyicer/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Set of functions for easy computation and plotting of ICERs","text":"basic example using summed_output() function written package palmerpenguins::penguins dataset: *detailed usage package, please refer vignette package.","code":"library(easyicer) library(palmerpenguins)  # Create a filter condition and store as an object sex_male_year_2007 <- palmerpenguins::penguins$sex == \"male\" & palmerpenguins::penguins$year == 2007  summed_output(data = palmerpenguins::penguins,               group_vars = c(\"island\", \"species\"),               sum_var = \"bill_depth_mm\",               filter_vars = sex_male_year_2007,               na.rm = TRUE) #> # A tibble: 5 × 3 #> # Groups:   island [3] #>   island    species   cumulative #>   <fct>     <fct>          <dbl> #> 1 Biscoe    Adelie          91.5 #> 2 Biscoe    Gentoo         261.  #> 3 Dream     Adelie         194.  #> 4 Dream     Chinstrap      249.  #> 5 Torgersen Adelie         143."},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/icercalc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the ratio of incremental change between a new and comparator state. — icercalc","title":"Calculate the ratio of incremental change between a new and comparator state. — icercalc","text":"function takes 2x2 matrix calculates ratio difference two numerator denominator states. function intended calculate ICER two defined strategies interventions health economics assessment.","code":""},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/icercalc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the ratio of incremental change between a new and comparator state. — icercalc","text":"","code":"icercalc(data, rev = c(\"neither\", \"rows\", \"columns\", \"both\"))"},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/icercalc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the ratio of incremental change between a new and comparator state. — icercalc","text":"data object containing 2x2 matrix exactly 4 numerical values rev argument specifying order matrix inputted \"data\" argument. Includes \"rows\" (reverses order rows), \"columns\" (reverses columns) \"\" (reverses ). Set \"neither\" default.","code":""},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/icercalc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the ratio of incremental change between a new and comparator state. — icercalc","text":"matrix used calculate output \"rev\" argument applied numeric output.","code":""},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/icercalc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the ratio of incremental change between a new and comparator state. — icercalc","text":"function expects \"data\" argument list object storing 2x2 matrix containing exactly 4 numerical values. Using labels expected ICER calculation, following structure expected:   function extracts matrices outputs calculation relative defined reference values. matrix desired format, \"rev\" argument can used switch order rows, columns . set \"neither\" default calculate ICER using current order values presented.","code":"old     new cost (ref)   n00     n01 qaly (ref)   n10     n11"},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/icercalc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the ratio of incremental change between a new and comparator state. — icercalc","text":"","code":"icer_table <- matrix(c(24, 12, 8, 6), nrow = 2, ncol = 2, byrow = TRUE)  # Calculating ICER with the native matrix as inputted with the default rev = \"neither\" icercalc(data = icer_table) #> [1] \"Modified matrix:\" #>      [,1] [,2] #> [1,]   24   12 #> [2,]    8    6 #>  #> Incremental Cost: #>  -12  #> Incremental QALY: #>  -2  #> Incremental cost-effectiveness ratio (ICER): #>  6   # Applying a \"rev\" argument to rearrange the matrix for ICER calculation icercalc(data = icer_table, rev = \"columns\") #> [1] \"Modified matrix:\" #>      [,1] [,2] #> [1,]   12   24 #> [2,]    6    8 #>  #> Incremental Cost: #>  12  #> Incremental QALY: #>  2  #> Incremental cost-effectiveness ratio (ICER): #>  6"},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/icerplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ICERs on a cost-effectiveness plane with incremental effectiveness and incremental cost plotted on the x and y axes, respectively. — icerplot","title":"Plot ICERs on a cost-effectiveness plane with incremental effectiveness and incremental cost plotted on the x and y axes, respectively. — icerplot","text":"function generates cost-effectiveness scatter plot intended ICERs. handles dataframe x (QALY) y (Cost) numeric columns optional names column .","code":""},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/icerplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ICERs on a cost-effectiveness plane with incremental effectiveness and incremental cost plotted on the x and y axes, respectively. — icerplot","text":"","code":"icerplot(data, x, y, names = NULL, na.rm = TRUE)"},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/icerplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ICERs on a cost-effectiveness plane with incremental effectiveness and incremental cost plotted on the x and y axes, respectively. — icerplot","text":"data dataframe containing least two numeric columns identical length. x variable dataframe containing numeric values. Input incremental effectiveness (.e., QALY) ICER plot. y variable dataframe containing numeric values. Input incremental cost ICER plot. names argument include strategy/intervention names dataframe plot legend. Set NULL default. NULL, labels default random letters alphabetical order based nrows dataframe. na.rm argument specifying handle NA values data creating plot; set \"TRUE\" default.","code":""},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/icerplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ICERs on a cost-effectiveness plane with incremental effectiveness and incremental cost plotted on the x and y axes, respectively. — icerplot","text":"scatter plot figure legend.","code":""},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/icerplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ICERs on a cost-effectiveness plane with incremental effectiveness and incremental cost plotted on the x and y axes, respectively. — icerplot","text":"","code":"# Creating a dataframe with ICERs icers <- data.frame( intervention = c(\"int1\", \"int2\", \"int3\", \"int4\", \"int5\"), effect = c(1, 2, 3, 3, 4), cost = c(2, 4, 6, 2, 8))  # Applying function to create ICER plot with no \"names\" argument icerplot(data = icers, x = \"effect\", y = \"cost\")   # Applying function with \"names\" argument specified icerplot(data = icers, x = \"effect\", y = \"cost\", names = \"intervention\")"},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/summed_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum values in numeric column sorted by variable groupings. — summed_output","title":"Sum values in numeric column sorted by variable groupings. — summed_output","text":"function sums column numeric type using dplyr pipeline. Users can set grouping hierarchies filter conditions specify calculations.","code":""},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/summed_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum values in numeric column sorted by variable groupings. — summed_output","text":"","code":"summed_output(   data,   group_vars = NULL,   sum_var,   filter_vars = TRUE,   na.rm = TRUE )"},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/summed_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum values in numeric column sorted by variable groupings. — summed_output","text":"data dataframe function applied . group_vars variable(s)/column name(s) dataframe used group observations based common characteristics. \"group_vars\" specifies type operation (group_by). Set \"NULL\" default. sum_var character string represents column name/variable containing numeric values. \"sum_var\" specifies type operation (sum) variable. filter_vars variable(s)/column(s) called set conditions filtering. \"filter_vars\" specifies type operation (filter) selected variables. Set TRUE default user can select filter conditions leave argument unused. na.rm argument specifying handle NA values data performing sum operation; set \"TRUE\" default prevent NA output sum operation column passed function.","code":""},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/summed_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum values in numeric column sorted by variable groupings. — summed_output","text":"dataframe new column named \"cumulative\" containing summed output value grouping.","code":""},{"path":"https://stat545ubc-2024.github.io/easyicer/reference/summed_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum values in numeric column sorted by variable groupings. — summed_output","text":"","code":"# Using the function without any grouping or filtering conditions summed_output(data = palmerpenguins::penguins,               sum_var = \"body_mass_g\") #> # A tibble: 1 × 1 #>   cumulative #>        <int> #> 1    1437000  # Applying filters by storing filter conditions as an object in the function call sex_male_year_2007 <- palmerpenguins::penguins$sex == \"male\" & palmerpenguins::penguins$year == 2007  summed_output(data = palmerpenguins::penguins,               group_vars = c(\"island\", \"species\"),               sum_var = \"bill_depth_mm\",               filter_vars = sex_male_year_2007,               na.rm = TRUE) #> # A tibble: 5 × 3 #> # Groups:   island [3] #>   island    species   cumulative #>   <fct>     <fct>          <dbl> #> 1 Biscoe    Adelie          91.5 #> 2 Biscoe    Gentoo         261.  #> 3 Dream     Adelie         194.  #> 4 Dream     Chinstrap      249.  #> 5 Torgersen Adelie         143."}]
